---
swagger: "2.0"
info:
  description: ""
  version: "1.6.0"
  title: "Park Elsewhere"
host: "localhost:8080"
schemes:
- "http"
paths:
  /incidents/:
    get:
      tags:
      - "parkelsewhere"
      description: "Loads a list of incidents"
      operationId: "getIncidents"
      produces:
      - "application/json"
      - "application/x-yaml"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "$page"
        in: "query"
        description: "Number of the page to retrieve. Integer value."
        required: false
        type: "string"
      - name: "lat"
        in: "query"
        description: "Allows to filter the collections of result by the value of field\
          \ lat"
        required: false
        type: "string"
      - name: "lon"
        in: "query"
        description: "Allows to filter the collections of result by the value of field\
          \ lon"
        required: false
        type: "string"
      - name: "date"
        in: "query"
        description: "Allows to filter the collections of result by the value of field\
          \ date"
        required: false
        type: "string"
      - name: "id"
        in: "query"
        description: "Allows to filter the collections of result by the value of field\
          \ id"
        required: false
        type: "string"
      - name: "$size"
        in: "query"
        description: "Size of the page to retrieve. Integer value"
        required: false
        type: "string"
      - name: "postcode"
        in: "query"
        description: "Allows to filter the collections of result by the value of field\
          \ postcode"
        required: false
        type: "string"
      - name: "sticker"
        in: "query"
        description: "Allows to filter the collections of result by the value of field\
          \ sticker"
        required: false
        type: "string"
      - name: "$sort"
        in: "query"
        description: "Order in which to retrieve the results. Multiple sort criteria\
          \ can be passed. Example: sort=age ASC,height DESC"
        required: false
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Sticker"
        400:
          description: "Status 400"
      x-swagger-router-controller: "Parkelsewhere"
    post:
      tags:
      - "parkelsewhere"
      description: "Adds a incident"
      operationId: "postIncidents"
      consumes:
      - "application/json"
      - "application/x-yaml"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/x-yaml"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Incident"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Incident"
      x-swagger-router-controller: "Parkelsewhere"
  /incidents/{incidentid}:
    get:
      tags:
      - "parkelsewhere"
      description: "Loads a incident"
      operationId: "getIncidentsIncident"
      produces:
      - "application/json"
      - "application/x-yaml"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "incidentid"
        in: "path"
        description: "Identifier of the incident"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Incident"
        400:
          description: "Status 400"
      x-swagger-router-controller: "Parkelsewhere"
    put:
      tags:
      - "parkelsewhere"
      description: "Stores a incident"
      operationId: "putIncidentsIncidentid"
      consumes:
      - "application/json"
      - "application/x-yaml"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/x-yaml"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "incidentid"
        in: "path"
        description: "Identifier of the Incident"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Incident"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Incident"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
      security:
      - urbanwild_admin_auth:
        - "admin"
      x-swagger-router-controller: "Parkelsewhere"
    delete:
      tags:
      - "parkelsewhere"
      description: "Deletes a incident"
      operationId: "deleteIncidentsIncidentid"
      parameters:
      - name: "incidentid"
        in: "path"
        description: "Identifier of the incident"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
      security:
      - urbanwild_admin_auth:
        - "admin"
      x-swagger-router-controller: "Parkelsewhere"
  /stickers/:
    get:
      tags:
      - "parkelsewhere"
      description: "Loads a list of sticker"
      operationId: "getStickers"
      produces:
      - "application/json"
      - "application/x-yaml"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "$size"
        in: "query"
        description: "Size of the page to retrieve. Integer value"
        required: false
        type: "string"
      - name: "id"
        in: "query"
        description: "Allows to filter the collections of result by the value of field\
          \ id"
        required: false
        type: "string"
      - name: "$sort"
        in: "query"
        description: "Order in which to retrieve the results. Multiple sort criteria\
          \ can be passed. Example: sort=age ASC,height DESC"
        required: false
        type: "string"
      - name: "reference"
        in: "query"
        description: "Allows to filter the collections of result by the value of field\
          \ reference"
        required: false
        type: "string"
      - name: "$page"
        in: "query"
        description: "Number of the page to retrieve. Integer value."
        required: false
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Sticker"
        400:
          description: "Status 400"
      x-swagger-router-controller: "Parkelsewhere"
    post:
      tags:
      - "parkelsewhere"
      description: "Adds a sticker"
      operationId: "postStickers"
      consumes:
      - "application/json"
      - "application/x-yaml"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/x-yaml"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Sticker"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Sticker"
      x-swagger-router-controller: "Parkelsewhere"
  /stickers/{stickerid}:
    get:
      tags:
      - "parkelsewhere"
      description: "Loads a sticker"
      operationId: "getStickersStickerid"
      produces:
      - "application/json"
      - "application/x-yaml"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "stickerid"
        in: "path"
        description: "Identifier of the sticker"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Sticker"
        400:
          description: "Status 400"
      x-swagger-router-controller: "Parkelsewhere"
    put:
      tags:
      - "parkelsewhere"
      description: "Stores a Sticker"
      operationId: "putStickersStickerid"
      consumes:
      - "application/json"
      - "application/x-yaml"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/x-yaml"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "stickerid"
        in: "path"
        description: "Identifier of the sticker"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Sticker"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Sticker"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
      security:
      - urbanwild_admin_auth:
        - "admin"
      x-swagger-router-controller: "Parkelsewhere"
    delete:
      tags:
      - "parkelsewhere"
      description: "Deletes a sticker"
      operationId: "deleteStickersStickerid"
      parameters:
      - name: "stickerid"
        in: "path"
        description: "Identifier of the Sticker"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
      security:
      - urbanwild_admin_auth:
        - "admin"
      x-swagger-router-controller: "Parkelsewhere"
securityDefinitions:
  urbanwild_admin_auth:
    type: "oauth2"
    authorizationUrl: "https://urbanwild.eu.auth0.com/authorize"
    flow: "implicit"
    scopes:
      admin: "Full Access"
definitions:
  Incident:
    type: "object"
    required:
    - "date"
    - "lat"
    - "lon"
    - "postcode"
    - "sticker"
    properties:
      id:
        type: "string"
        example: "sample id"
        description: "Auto-generated primary key field"
      postcode:
        type: "string"
        example: "M1 5GD"
      date:
        type: "integer"
        format: "int64"
        example: 1511395200000
      sticker:
        type: "string"
        example: "sample sticker"
        description: "This property is a reference to a sticker"
      lat:
        type: "number"
        format: "double"
        example: 1.1
      lon:
        type: "number"
        format: "double"
        example: 1.1
    example: "{\"id\":\"sample id\",\"postcode\":\"M1 5GD\",\"date\":1511395200000,\"\
      sticker\":\"sample sticker\",\"lat\":1.1,\"lon\":1.1}"
  Sticker:
    type: "object"
    properties:
      id:
        type: "string"
        example: "sample id"
        description: "Auto-generated primary key field"
      reference:
        type: "string"
        example: "Jay"
    example: "{\"id\":\"sample id\",\"reference\":\"Alice\"}"
